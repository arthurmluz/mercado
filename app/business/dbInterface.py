from abc import ABC, abstractmethod
from app.business.exceptions import APIBadRequest


class DBInterface(ABC):
    """
        database interface, to be implemented by database services
        contains abstract methods
    """

    @staticmethod
    def _validateFields(entity, columns, data: dict):
        """Validate if all needed columns for the creation of entity is on the dictionary"""
        # for each column attribute on selected table
        for column in columns:
            col_name = column.description
            # id is autogenerated, ignore it
            if col_name == "id":
                continue

            # check if data payload has the column
            if col_name in data:
                setattr(entity, col_name, data[col_name])  # set the column attribute with received value
            elif column.nullable:
                # if it's not on the received data, but is nullable, set as default value
                setattr(entity, col_name, column.default)
            else:
                # if it's not on the data nor is a nullable column
                # throw bad request
                raise APIBadRequest(description="BadRequest creating new entity: '{0}' must be on the payload"
                                    .format(col_name))
        return

    @staticmethod
    @abstractmethod
    def getAll():
        """ returns all rows from it"""
        pass

    @staticmethod
    @abstractmethod
    def getById(target_id):
        """ Receives an ID, and returns a row with that ID from that table"""
        pass

    @staticmethod
    @abstractmethod
    def create(data):
        """Receives a dictionary with data to create a new object to that table"""
        pass

    @staticmethod
    def delete(target_id):
        """Receives an ID to delete an object"""
        pass
